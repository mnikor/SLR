!pip install openai
!pip install python-docx
!pip install biopython

import openai
from docx import Document

def extract_abstracts_and_question_from_word(doc_path):
    doc = Document(doc_path)
    abstracts = []
    main_research_question = doc.paragraphs[0].text.strip()
    
    table_ended = False
    for paragraph in doc.paragraphs:
        if not table_ended and paragraph.style.name.startswith('Table'):
            continue
        if not paragraph.style.name.startswith('Table'):
            table_ended = True
        if table_ended and paragraph.text.strip() and not paragraph.style.name.startswith('Heading'):
            abstracts.append(paragraph.text)
    return abstracts, main_research_question

def generate_insight_for_abstracts(abstracts, main_research_question):
    instructions = (
        "You are a systematic literature review expert. "
        f"Given the abstracts provided, conduct a detailed and comprehensive analysis and synthesize an evidence-based report addressing the main research question: "
        f"'{main_research_question}'. "
        "Please ignore abstracts that do not contribute towards answering the research question. "
        "Your synthesis should be structured with:"
        f"\n\n1. An introduction that provides an overview of the topic and the main question."
        f"\n2. Detailed main findings based on the abstracts. Elaborate on key conclusions from each abstract and reference them accordingly."
        f"\n3. Any limitations found in the abstracts or the synthesized report."
        f"\n4. Recommendations for further research based on any gaps or unanswered questions."
        f"\n\nEnsure that the insights are directly drawn from the abstracts and not made up. When making a point or conclusion based on an abstract, reference that abstract appropriately."
    )
    
    for abstract in abstracts:
        instructions += "\n\n- " + abstract
    response = openai.ChatCompletion.create(
      model="gpt-4",
      messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": instructions}
        ]
    )
    insight = response['choices'][0]['message']['content']
    return insight

def save_insight_to_word(insight, save_path):
    doc = Document()
    doc.add_heading('Synthesized Insight from Systematic Literature Review', level=0)
    doc.add_paragraph(insight)
    doc.save(save_path)

# Execution
openai.api_key = ''
doc_path = "/content/drive/MyDrive/SLR_Report_with_Scores-67.docx"
abstracts, main_research_question = extract_abstracts_and_question_from_word(doc_path)
insight = generate_insight_for_abstracts(abstracts, main_research_question)
save_path = "/content/drive/MyDrive/Synthesized_Insight.docx"
save_insight_to_word(insight, save_path)
